[
  {
    "id": "bg-inject-30s",
    "type": "inject",
    "z": "biogas-plant-simulation",
    "name": "30s Interval",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "30",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 120,
    "y": 80,
    "wires": [
      [
        "bg-simulation-function"
      ]
    ]
  },
  {
    "id": "bg-simulation-function",
    "type": "function",
    "z": "biogas-plant-simulation",
    "name": "Biogas Plant Data Generator",
    "func": "// Biogas Plant Data Simulation\nconst now = new Date();\nconst hour = now.getHours();\nconst dayOfYear = Math.floor((now - new Date(now.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));\n\n// Temperature model (°C)\nfunction calculateTemperature() {\n    const baseTemp = 35;\n    const seasonalFactor = 1 + 0.1 * Math.sin(2 * Math.PI * (dayOfYear - 172) / 365);\n    const dailyFactor = 1 + 0.05 * Math.sin(2 * Math.PI * (hour - 12) / 24);\n    const noise = (Math.random() - 0.5) * 2;\n    return baseTemp * seasonalFactor * dailyFactor + noise;\n}\n\n// pH level model\nfunction calculatePH() {\n    const basePH = 7.2;\n    const variation = (Math.random() - 0.5) * 0.4;\n    return Math.max(6.5, Math.min(8.0, basePH + variation));\n}\n\n// Gas flow rate model (m³/h)\nfunction calculateGasFlowRate(temperature, ph) {\n    const baseFlowRate = 50;\n    const tempFactor = 1 + 0.02 * (temperature - 35);\n    const phFactor = 1 - 0.1 * Math.abs(ph - 7.2);\n    const noise = (Math.random() - 0.5) * 5;\n    return Math.max(0, baseFlowRate * tempFactor * phFactor + noise);\n}\n\n// Methane concentration model (%)\nfunction calculateMethaneConcentration(temperature, ph) {\n    const baseMethane = 65;\n    const tempFactor = 1 + 0.01 * (temperature - 35);\n    const phFactor = 1 - 0.05 * Math.abs(ph - 7.2);\n    const noise = (Math.random() - 0.5) * 3;\n    return Math.max(50, Math.min(80, baseMethane * tempFactor * phFactor + noise));\n}\n\n// Pressure model (bar)\nfunction calculatePressure(gasFlowRate) {\n    const basePressure = 1.2;\n    const flowFactor = 1 + 0.01 * (gasFlowRate - 50);\n    const noise = (Math.random() - 0.5) * 0.1;\n    return Math.max(0.8, basePressure * flowFactor + noise);\n}\n\n// Energy content model (kWh/m³)\nfunction calculateEnergyContent(methaneConcentration) {\n    const baseEnergy = 6.5;\n    const methaneFactor = methaneConcentration / 65;\n    const noise = (Math.random() - 0.5) * 0.2;\n    return baseEnergy * methaneFactor + noise;\n}\n\n// Generate data with fault scenarios\nfunction generateBiogasData() {\n    const faultProbability = 0.001;\n    const isFault = Math.random() < faultProbability;\n    \n    let temperature = calculateTemperature();\n    let ph = calculatePH();\n    let gasFlowRate = calculateGasFlowRate(temperature, ph);\n    let methaneConcentration = calculateMethaneConcentration(temperature, ph);\n    let pressure = calculatePressure(gasFlowRate);\n    let energyContent = calculateEnergyContent(methaneConcentration);\n    \n    // Fault scenarios\n    if (isFault) {\n        const faultType = Math.floor(Math.random() * 4);\n        switch (faultType) {\n            case 0: // Temperature fault\n                temperature += 15;\n                gasFlowRate *= 0.7;\n                methaneConcentration *= 0.8;\n                break;\n            case 1: // pH imbalance\n                ph = 6.0;\n                gasFlowRate *= 0.5;\n                methaneConcentration *= 0.6;\n                break;\n            case 2: // Gas leak\n                pressure *= 0.6;\n                gasFlowRate *= 0.8;\n                break;\n            case 3: // Digester fault\n                gasFlowRate *= 0.3;\n                methaneConcentration *= 0.7;\n                pressure *= 0.8;\n                break;\n        }\n    }\n    \n    return {\n        device_id: `bg_${String(Math.floor(Math.random() * 10) + 1).padStart(3, '0')}`,\n        device_type: 'biogas_plant',\n        timestamp: now.toISOString(),\n        data: {\n            temperature: Math.round(temperature * 100) / 100,\n            ph: Math.round(ph * 100) / 100,\n            gas_flow_rate: Math.round(gasFlowRate * 100) / 100,\n            methane_concentration: Math.round(methaneConcentration * 100) / 100,\n            pressure: Math.round(pressure * 100) / 100,\n            energy_content: Math.round(energyContent * 100) / 100\n        },\n        status: isFault ? 'fault' : 'operational',\n        location: 'site_c',\n        fault_type: isFault ? ['temperature', 'ph_imbalance', 'gas_leak', 'digester'][faultType] : null\n    };\n}\n\n// Generate and return data\nconst bgData = generateBiogasData();\nmsg.payload = bgData;\nmsg.topic = `devices/biogas_plant/${bgData.device_id}/telemetry`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 80,
    "wires": [
      [
        "bg-mqtt-output"
      ]
    ]
  },
  {
    "id": "bg-mqtt-output",
    "type": "mqtt out",
    "z": "biogas-plant-simulation",
    "name": "MQTT Output (Publish)",
    "topic": "",
    "qos": "1",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-config",
    "x": 520,
    "y": 80,
    "wires": []
  },
  {
    "id": "bg-mqtt-input",
    "type": "mqtt in",
    "z": "biogas-plant-simulation",
    "name": "MQTT Input (Subscribe)",
    "topic": "devices/biogas_plant/+/telemetry",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt-broker-config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 120,
    "y": 200,
    "wires": [
      [
        "bg-validation"
      ]
    ]
  },
  {
    "id": "bg-validation",
    "type": "function",
    "z": "biogas-plant-simulation",
    "name": "Data Validation",
    "func": "// Validate biogas plant data received from MQTT\nconst data = msg.payload;\nconst errors = [];\n\n// Check required fields\nif (!data.device_id || !data.timestamp || !data.data) {\n    errors.push('Missing required fields');\n}\n\n// Validate data ranges\nconst ranges = {\n    temperature: { min: 20, max: 60 },\n    ph: { min: 6.0, max: 8.5 },\n    gas_flow_rate: { min: 0, max: 100 },\n    methane_concentration: { min: 40, max: 85 },\n    pressure: { min: 0.5, max: 2.0 },\n    energy_content: { min: 4.0, max: 8.0 }\n};\n\nfor (const [key, range] of Object.entries(ranges)) {\n    const value = data.data[key];\n    if (value < range.min || value > range.max) {\n        errors.push(`${key} out of range: ${value} (${range.min}-${range.max})`);\n    }\n}\n\n// Check for physical consistency\nif (data.data.methane_concentration < 50 && data.data.gas_flow_rate > 20) {\n    errors.push('High gas flow with low methane concentration');\n}\n\nif (data.data.pressure < 0.8 && data.data.gas_flow_rate > 30) {\n    errors.push('High gas flow with low pressure');\n}\n\nif (errors.length > 0) {\n    msg.error = errors;\n    msg.status = 'invalid';\n} else {\n    msg.status = 'valid';\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 200,
    "wires": [
      [
        "bg-error-handling"
      ]
    ]
  },
  {
    "id": "bg-error-handling",
    "type": "switch",
    "z": "biogas-plant-simulation",
    "name": "Error Check",
    "property": "status",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "valid",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "invalid",
        "vt": "str"
      }
    ],
    "check": "all",
    "repair": false,
    "outputs": 2,
    "x": 520,
    "y": 200,
    "wires": [
      [
        "bg-data-transformer"
      ],
      [
        "bg-error-log"
      ]
    ]
  },
  {
    "id": "bg-data-transformer",
    "type": "function",
    "z": "biogas-plant-simulation",
    "name": "Data Transformer",
    "func": "// Transform data for InfluxDB 2.x format\nconst data = msg.payload;\n\n// Ensure all numeric values are properly converted\nconst temperature = parseFloat(data.data.temperature) || 0;\nconst ph = parseFloat(data.data.ph) || 0;\nconst gasFlowRate = parseFloat(data.data.gas_flow_rate) || 0;\nconst methaneConcentration = parseFloat(data.data.methane_concentration) || 0;\nconst pressure = parseFloat(data.data.pressure) || 0;\nconst energyContent = parseFloat(data.data.energy_content) || 0;\n\n// Calculate efficiency if not provided\nconst efficiency = data.data.efficiency ? parseFloat(data.data.efficiency) : \n    (gasFlowRate > 0 && methaneConcentration > 50) ? (methaneConcentration / 65) * 100 : 0;\n\n// The Node-RED InfluxDB output node expects fields directly in the payload\n// and tags as separate message properties\nmsg.payload = {\n    temperature: temperature,\n    ph: ph,\n    gas_flow_rate: gasFlowRate,\n    methane_concentration: methaneConcentration,\n    pressure: pressure,\n    energy_content: energyContent,\n    efficiency: efficiency\n};\n\n// Set tags as message properties\nmsg.device_id = data.device_id;\nmsg.device_type = data.device_type;\nmsg.location = data.location || 'unknown';\nmsg.status = data.status || 'operational';\n\n// Set timestamp\nmsg.timestamp = new Date(data.timestamp).getTime();\n\n// Add debug information\nnode.log('✅ Biogas plant data transformed for InfluxDB:');\nnode.log('  - Temperature: ' + temperature + ' °C');\nnode.log('  - pH: ' + ph);\nnode.log('  - Gas Flow Rate: ' + gasFlowRate + ' m³/h');\nnode.log('  - Methane Concentration: ' + methaneConcentration + ' %');\nnode.log('  - Pressure: ' + pressure + ' bar');\nnode.log('  - Energy Content: ' + energyContent + ' kWh/m³');\nnode.log('  - Efficiency: ' + efficiency + ' %');\nnode.log('  - Fields count: ' + Object.keys(msg.payload).length);\nnode.log('  - Tags: device_id=' + msg.device_id + ', device_type=' + msg.device_type);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 160,
    "wires": [
      [
        "bg-influxdb-writer",
        "bg-success-log"
      ]
    ]
  },
  {
    "id": "bg-influxdb-writer",
    "type": "influxdb out",
    "z": "biogas-plant-simulation",
    "influxdb": "influxdb-config",
    "name": "InfluxDB Writer",
    "measurement": "biogas_plant_data",
    "precision": "ms",
    "precisionV18FluxV20": "ms",
    "org": "renewable_energy_org",
    "bucket": "renewable_energy",
    "tags": "device_id={{device_id}},device_type={{device_type}},location={{location}},status={{status}}",
    "x": 720,
    "y": 160,
    "wires": [
      [
        "bg-success-log"
      ]
    ]
  },
  {
    "id": "bg-success-log",
    "type": "debug",
    "z": "biogas-plant-simulation",
    "name": "Biogas Plant Success Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 920,
    "y": 160,
    "wires": []
  },
  {
    "id": "bg-error-log",
    "type": "debug",
    "z": "biogas-plant-simulation",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 720,
    "y": 200,
    "wires": []
  },
  {
    "id": "mqtt-broker-config",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "mosquitto",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "influxdb-config",
    "type": "influxdb",
    "hostname": "influxdb",
    "port": "8086",
    "protocol": "http",
    "name": "InfluxDB",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "http://influxdb:8086",
    "rejectUnauthorized": false,
    "token": "renewable_energy_admin_token_123",
    "organization": "renewable_energy_org",
    "bucket": "renewable_energy"
  }
] 