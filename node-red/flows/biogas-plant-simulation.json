[
  {
    "id": "bg-inject-30s",
    "type": "inject",
    "z": "biogas-plant-simulation",
    "name": "30s Interval",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "30",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 120,
    "y": 80,
    "wires": [
      [
        "bg-simulation-function"
      ]
    ]
  },
  {
    "id": "bg-simulation-function",
    "type": "function",
    "z": "biogas-plant-simulation",
    "name": "Biogas Plant Data Generator",
    "func": "// Biogas Plant Data Simulation\n// Realistic mathematical model for anaerobic digestion\n\nconst now = new Date();\nconst hour = now.getHours();\nconst dayOfYear = Math.floor((now - new Date(now.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));\n\n// Temperature model (°C)\nfunction calculateTemperature() {\n    const baseTemp = 35; // Optimal digestion temperature\n    const dailyVariation = 2 * Math.sin(2 * Math.PI * (hour - 6) / 24);\n    const seasonalVariation = 3 * Math.sin(2 * Math.PI * (dayOfYear - 172) / 365);\n    const noise = (Math.random() - 0.5) * 1; // ±0.5°C noise\n    \n    return baseTemp + dailyVariation + seasonalVariation + noise;\n}\n\n// pH model\nfunction calculatePH() {\n    const basePH = 7.2; // Optimal pH for methanogens\n    const temp = calculateTemperature();\n    const tempEffect = (temp - 35) * 0.01; // pH change with temperature\n    const noise = (Math.random() - 0.5) * 0.2; // ±0.1 pH noise\n    \n    return Math.max(6.5, Math.min(8.0, basePH + tempEffect + noise));\n}\n\n// Gas flow rate model (m³/h)\nfunction calculateGasFlow() {\n    const temp = calculateTemperature();\n    const ph = calculatePH();\n    \n    // Temperature effect on gas production\n    const tempFactor = Math.exp(-Math.pow((temp - 35) / 10, 2));\n    \n    // pH effect on gas production\n    const phFactor = Math.exp(-Math.pow((ph - 7.2) / 0.5, 2));\n    \n    // Base gas production with daily variations\n    const baseFlow = 100; // m³/h\n    const dailyVariation = 0.2 * Math.sin(2 * Math.PI * (hour - 12) / 24);\n    const noise = (Math.random() - 0.5) * 10; // ±5 m³/h noise\n    \n    return Math.max(0, baseFlow * tempFactor * phFactor * (1 + dailyVariation) + noise);\n}\n\n// Methane concentration model (%)\nfunction calculateMethaneConcentration() {\n    const temp = calculateTemperature();\n    const ph = calculatePH();\n    \n    // Optimal conditions for methane production\n    const tempOptimal = Math.exp(-Math.pow((temp - 35) / 5, 2));\n    const phOptimal = Math.exp(-Math.pow((ph - 7.2) / 0.3, 2));\n    \n    const baseConcentration = 60; // %\n    const variation = (tempOptimal + phOptimal) / 2;\n    const noise = (Math.random() - 0.5) * 5; // ±2.5% noise\n    \n    return Math.max(40, Math.min(80, baseConcentration * variation + noise));\n}\n\n// Power output model (kW)\nfunction calculatePowerOutput() {\n    const gasFlow = calculateGasFlow();\n    const methaneConcentration = calculateMethaneConcentration();\n    \n    // Energy content of methane (kWh/m³)\n    const methaneEnergy = 10.5; // kWh/m³\n    \n    // Generator efficiency\n    const generatorEfficiency = 0.35; // 35% electrical efficiency\n    \n    // Calculate power output\n    const methaneFlow = gasFlow * methaneConcentration / 100;\n    const powerOutput = methaneFlow * methaneEnergy * generatorEfficiency;\n    \n    return Math.max(0, powerOutput);\n}\n\n// Generate data with fault scenarios\nfunction generateBiogasData() {\n    const faultProbability = 0.0015; // 0.15% chance of fault\n    const isFault = Math.random() < faultProbability;\n    \n    let temperature = calculateTemperature();\n    let ph = calculatePH();\n    let gasFlow = calculateGasFlow();\n    let methaneConcentration = calculateMethaneConcentration();\n    let powerOutput = calculatePowerOutput();\n    \n    // Fault scenarios\n    if (isFault) {\n        const faultType = Math.floor(Math.random() * 3);\n        switch (faultType) {\n            case 0: // Temperature fault\n                temperature += 15;\n                gasFlow *= 0.5;\n                methaneConcentration *= 0.7;\n                powerOutput *= 0.4;\n                break;\n            case 1: // pH fault\n                ph = 5.5; // Acidic conditions\n                gasFlow *= 0.3;\n                methaneConcentration *= 0.5;\n                powerOutput *= 0.2;\n                break;\n            case 2: // Gas leak fault\n                gasFlow *= 0.2;\n                methaneConcentration *= 0.8;\n                powerOutput *= 0.15;\n                break;\n        }\n    }\n    \n    return {\n        device_id: `bg_${String(Math.floor(Math.random() * 3) + 1).padStart(3, '0')}`,\n        device_type: 'biogas_plant',\n        timestamp: now.toISOString(),\n        data: {\n            gas_flow: Math.round(gasFlow * 100) / 100,\n            methane_concentration: Math.round(methaneConcentration * 100) / 100,\n            temperature: Math.round(temperature * 100) / 100,\n            ph: Math.round(ph * 100) / 100,\n            power_output: Math.round(powerOutput * 100) / 100\n        },\n        status: isFault ? 'fault' : 'operational',\n        location: 'site_c',\n        fault_type: isFault ? ['temperature', 'ph', 'gas_leak'][faultType] : null\n    };\n}\n\n// Generate and return data\nconst bgData = generateBiogasData();\nmsg.payload = bgData;\nmsg.topic = `devices/biogas_plant/${bgData.device_id}/telemetry`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 80,
    "wires": [
      [
        "bg-mqtt-output",
        "bg-validation"
      ]
    ]
  },
  {
    "id": "bg-mqtt-output",
    "type": "mqtt out",
    "z": "biogas-plant-simulation",
    "name": "MQTT Output",
    "topic": "",
    "qos": "1",
    "retain": false,
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "mqtt-broker-config",
    "x": 520,
    "y": 80,
    "wires": []
  },
  {
    "id": "bg-validation",
    "type": "function",
    "z": "biogas-plant-simulation",
    "name": "Data Validation",
    "func": "// Validate biogas plant data\nconst data = msg.payload;\nconst errors = [];\n\n// Check required fields\nif (!data.device_id || !data.timestamp || !data.data) {\n    errors.push('Missing required fields');\n}\n\n// Validate data ranges\nconst ranges = {\n    gas_flow: { min: 0, max: 200 },\n    methane_concentration: { min: 30, max: 85 },\n    temperature: { min: 20, max: 60 },\n    ph: { min: 6.0, max: 8.5 },\n    power_output: { min: 0, max: 500 }\n};\n\nfor (const [key, range] of Object.entries(ranges)) {\n    const value = data.data[key];\n    if (value < range.min || value > range.max) {\n        errors.push(`${key} out of range: ${value} (${range.min}-${range.max})`);\n    }\n}\n\n// Check for physical consistency\nconst expectedPower = data.data.gas_flow * data.data.methane_concentration / 100 * 10.5 * 0.35;\nif (Math.abs(data.data.power_output - expectedPower) > expectedPower * 0.2) {\n    errors.push('Power output inconsistent with gas flow and methane concentration');\n}\n\nif (errors.length > 0) {\n    msg.error = errors;\n    msg.status = 'invalid';\n} else {\n    msg.status = 'valid';\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 160,
    "wires": [
      [
        "bg-error-handling"
      ]
    ]
  },
  {
    "id": "bg-error-handling",
    "type": "switch",
    "z": "biogas-plant-simulation",
    "name": "Error Check",
    "property": "status",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "valid",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "invalid",
        "vt": "str"
      }
    ],
    "check": "all",
    "repair": false,
    "outputs": 2,
    "x": 520,
    "y": 160,
    "wires": [
      [
        "bg-influxdb"
      ],
      [
        "bg-error-log"
      ]
    ]
  },
  {
    "id": "bg-influxdb",
    "type": "influxdb out",
    "z": "biogas-plant-simulation",
    "influxdb": "influxdb-config",
    "name": "Store Data",
    "measurement": "biogas_plant_data",
    "precision": "ms",
    "retentionPolicy": "",
    "database": "",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "renewable_energy",
    "bucket": "renewable_energy",
    "x": 720,
    "y": 120,
    "wires": []
  },
  {
    "id": "bg-error-log",
    "type": "debug",
    "z": "biogas-plant-simulation",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 720,
    "y": 160,
    "wires": []
  },
  {
    "id": "mqtt-broker-config",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "mosquitto",
    "port": "1883",
    "clientid": "node-red-simulation",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "influxdb-config",
    "type": "influxdb",
    "hostname": "influxdb",
    "port": "8086",
    "protocol": "http",
    "database": "renewable_energy",
    "name": "InfluxDB",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "http://influxdb:8086",
    "rejectUnauthorized": false,
    "token": "",
    "organization": "renewable_energy",
    "bucket": "renewable_energy"
  }
]